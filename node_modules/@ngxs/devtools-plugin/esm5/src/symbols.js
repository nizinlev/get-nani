/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken } from '@angular/core';
/**
 * Interface for the redux-devtools-extension API.
 * @record
 */
export function NgxsDevtoolsExtension() { }
if (false) {
    /**
     * @param {?} state
     * @return {?}
     */
    NgxsDevtoolsExtension.prototype.init = function (state) { };
    /**
     * @param {?} action
     * @param {?=} state
     * @return {?}
     */
    NgxsDevtoolsExtension.prototype.send = function (action, state) { };
    /**
     * @param {?} fn
     * @return {?}
     */
    NgxsDevtoolsExtension.prototype.subscribe = function (fn) { };
}
/**
 * @record
 */
export function NgxsDevtoolsAction() { }
if (false) {
    /** @type {?} */
    NgxsDevtoolsAction.prototype.type;
    /** @type {?} */
    NgxsDevtoolsAction.prototype.payload;
    /** @type {?} */
    NgxsDevtoolsAction.prototype.state;
    /** @type {?} */
    NgxsDevtoolsAction.prototype.id;
    /** @type {?} */
    NgxsDevtoolsAction.prototype.source;
}
/**
 * @record
 */
export function NgxsDevtoolsOptions() { }
if (false) {
    /**
     * The name of the extension
     * @type {?|undefined}
     */
    NgxsDevtoolsOptions.prototype.name;
    /**
     * Whether the dev tools is enabled or note. Useful for setting during production.
     * @type {?|undefined}
     */
    NgxsDevtoolsOptions.prototype.disabled;
    /**
     * Max number of entiries to keep.
     * @type {?|undefined}
     */
    NgxsDevtoolsOptions.prototype.maxAge;
    /**
     * Reformat actions before sending to dev tools
     * @type {?|undefined}
     */
    NgxsDevtoolsOptions.prototype.actionSanitizer;
    /**
     * Reformat state before sending to devtools
     * @type {?|undefined}
     */
    NgxsDevtoolsOptions.prototype.stateSanitizer;
}
/** @type {?} */
export var NGXS_DEVTOOLS_OPTIONS = new InjectionToken('NGXS_DEVTOOLS_OPTIONS');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ltYm9scy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL2RldnRvb2xzLXBsdWdpbi8iLCJzb3VyY2VzIjpbInNyYy9zeW1ib2xzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7OztBQUsvQywyQ0FJQzs7Ozs7O0lBSEMsNERBQXVCOzs7Ozs7SUFDdkIsb0VBQXFDOzs7OztJQUNyQyw4REFBbUU7Ozs7O0FBR3JFLHdDQU1DOzs7SUFMQyxrQ0FBYTs7SUFDYixxQ0FBYTs7SUFDYixtQ0FBVzs7SUFDWCxnQ0FBVzs7SUFDWCxvQ0FBZTs7Ozs7QUFHakIseUNBeUJDOzs7Ozs7SUFyQkMsbUNBQWM7Ozs7O0lBS2QsdUNBQW1COzs7OztJQUtuQixxQ0FBZ0I7Ozs7O0lBS2hCLDhDQUF3Qzs7Ozs7SUFLeEMsNkNBQXNDOzs7QUFHeEMsTUFBTSxLQUFPLHFCQUFxQixHQUFHLElBQUksY0FBYyxDQUFDLHVCQUF1QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBJbnRlcmZhY2UgZm9yIHRoZSByZWR1eC1kZXZ0b29scy1leHRlbnNpb24gQVBJLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5neHNEZXZ0b29sc0V4dGVuc2lvbiB7XG4gIGluaXQoc3RhdGU6IGFueSk6IHZvaWQ7XG4gIHNlbmQoYWN0aW9uOiBhbnksIHN0YXRlPzogYW55KTogdm9pZDtcbiAgc3Vic2NyaWJlKGZuOiAobWVzc2FnZTogTmd4c0RldnRvb2xzQWN0aW9uKSA9PiB2b2lkKTogVm9pZEZ1bmN0aW9uO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5neHNEZXZ0b29sc0FjdGlvbiB7XG4gIHR5cGU6IHN0cmluZztcbiAgcGF5bG9hZDogYW55O1xuICBzdGF0ZTogYW55O1xuICBpZDogbnVtYmVyO1xuICBzb3VyY2U6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBOZ3hzRGV2dG9vbHNPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBleHRlbnNpb25cbiAgICovXG4gIG5hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGRldiB0b29scyBpcyBlbmFibGVkIG9yIG5vdGUuIFVzZWZ1bCBmb3Igc2V0dGluZyBkdXJpbmcgcHJvZHVjdGlvbi5cbiAgICovXG4gIGRpc2FibGVkPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogTWF4IG51bWJlciBvZiBlbnRpcmllcyB0byBrZWVwLlxuICAgKi9cbiAgbWF4QWdlPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBSZWZvcm1hdCBhY3Rpb25zIGJlZm9yZSBzZW5kaW5nIHRvIGRldiB0b29sc1xuICAgKi9cbiAgYWN0aW9uU2FuaXRpemVyPzogKGFjdGlvbjogYW55KSA9PiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSZWZvcm1hdCBzdGF0ZSBiZWZvcmUgc2VuZGluZyB0byBkZXZ0b29sc1xuICAgKi9cbiAgc3RhdGVTYW5pdGl6ZXI/OiAoc3RhdGU6IGFueSkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGNvbnN0IE5HWFNfREVWVE9PTFNfT1BUSU9OUyA9IG5ldyBJbmplY3Rpb25Ub2tlbignTkdYU19ERVZUT09MU19PUFRJT05TJyk7XG4iXX0=